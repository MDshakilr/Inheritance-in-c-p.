//1. Single Inheritance Problem

#include<bits/stdc++.h>
using namespace std;

class Shape
{
public:
    double width;
    double height;
};

class Rectangle: public Shape
{
public:
    Rectangle(double nheight, double nwidth)
    {
        height = nheight;
        width =nwidth ;
    }

    void displayHeight()
    {
        cout << "The height of the rectangle is: " << height << endl;
    }

    void displayWidth()
    {
        cout << "The width of the rectangle is: " << width << endl;
    }

    double areaOfRectangle()
    {
        double area;
        area = height * width;
        return area;
    }
     double perimeter()
     {
        return 2 * (width + height);
    }
};

int main()
{
    Rectangle r1(5,10);
    r1.displayHeight();
    r1.displayWidth();
    cout << "The area of the rectangle is: " << r1.areaOfRectangle() << endl;
    cout << "The area of the perimeter is: " << r1.perimeter() << endl;
    return 0;
}










//2. Multilevel Inheritance Problem:

#include <bits/stdc++.h>
using namespace std;

class Vehicle {
protected:
    string fuelType;
    int capacity;

public:
    Vehicle( string nfuelType, int ncapacity)
    {
        fuelType=nfuelType;
    capacity=ncapacity;
    }
    void displayDetails() const
     {
        cout << "Fuel Type: " << fuelType << endl;
        cout << "Capacity: " << capacity << " liters" << endl;
    }
};

class Car : public Vehicle {
protected:
    int numSeats;

public:

  Car(const string& nfuelType, int ncapacity, int nseats) : Vehicle(nfuelType, ncapacity), numSeats(nseats) {}
    void displayDetails() const {
        Vehicle::displayDetails();
    cout << "Number of Seats: " << numSeats << endl;
    }
};

class Sedan : public Car {
private:
    int bootSpace;

public:
    Sedan(const string& fuel, int cap, int seats, int boot) : Car(fuel, cap, seats), bootSpace(boot) {}

    void displayDetails() const {
        Car::displayDetails();
    cout << "Boot Space: " << bootSpace << " liters" << endl;
    }
};

int main() {
    Vehicle vehicle("Gasoline", 50);
    Car car("Diesel", 60, 5);
    Sedan sedan("Petrol", 55, 5, 500);

    cout << "Details of Vehicle:" << endl;
    vehicle.displayDetails();

    cout << "\nDetails of Car:" << endl;
    car.displayDetails();

    cout << "\nDetails of Sedan:" << endl;
    sedan.displayDetails();

    return 0;
}












//3. Multiple Inheritance Problem:

#include <bits/stdc++.h>
using namespace std;

class Student
{
protected:
    string name;
    int rollNumber;

public:
    void setName(string name)
    {
        this->name = name;
    }
    void setRollNumber(int rollNumber)
    {
        this->rollNumber = rollNumber;
    }
    string getName()
    {
        return name;
    }
    int getRollNumber()
    {
        return rollNumber;
    }

    void details()
    {
        cout << "Name: " << name << endl;
        cout << "Roll number: " << rollNumber << endl;
    }
};

class Test
{
protected:
    int marks;
    string grade;
    void setGrade()
    {
        switch (marks / 10)
        {
        case 10:
        case 9:
        case 8:
            grade = "A+";
            break;
        case 7:
            grade = "A";
            break;
        case 6:
            grade = "A-";
            break;
        case 5:
            grade = "B";
            break;
        case 4:
            grade = "C";
            break;
        default:
            grade = "F";
            break;
        }
    }

public:
    void setMarks(int marks)
    {
        this->marks = marks;
        setGrade();
    }
    int getMarks()
    {
        return marks;
    }
    string getGrade()
    {
        return grade;
    }
    void details()
    {
        cout << "Marks: " << marks << endl;
        cout << "Grade: " << grade << endl;
    }
};

class Result : protected Student, protected Test
{
public:
    void setDetails(string name, int rollNumber, int marks)
    {
        setName(name);
        setRollNumber(rollNumber);
        setMarks(marks);
    }

    void details()
    {
        Student::details();
        Test::details();
    }
};

int main()
{
    Result result;
    result.setDetails("Shakil", 1235, 80);
    result.details();

    return 0;
}









//4. Hybrid Inheritance Problem:

#include<bits/stdc++.h>
using namespace std;

class Account{
private:
    int accountNumber;
    double balance;

public:
    Account(int accNum,double bal) : accountNumber(accNum), balance(bal){}

    double getbalance() const{
        return balance;
    }

    void deposit(double amount){
        balance += amount;
        cout << "Deposited: " << amount << ". New balance: " << balance << endl;
    }

    void withdraw(double amount){
        if(balance >= amount){
            balance -= amount;
            cout << "Withdrawn: " << amount << ". New balance: " << balance << endl;
        }else{
            cout << "Insufficient balace, cannot withdraw" << endl;
        }
    }
};

class SavingsAccount :virtual public Account{
private:
    double interestRate;
public:
    SavingsAccount(int accNum,double bal, int intRate) : Account(accNum,bal), interestRate(intRate){};

    void calculateInterest(){
        double interest = getbalance() * interestRate;
        cout << "Interest earned: " << interest << endl;
        deposit(interest);
    }
};

class CurrentAccount :virtual public Account {
public:
    CurrentAccount(int accNum, double bal): Account(accNum,bal){}

    void deductServiceCharge(double charge){
        withdraw(charge);
        cout << "Service charge " << charge << " deducted" << endl;
    }
};

class JointAccount : public CurrentAccount, public SavingsAccount{
private:
    string primaryOwner;
    string secondaryOwner;
public:
    JointAccount(int accNum, double bal, double rate, const string& owner1, const string& owner2)
    :Account(accNum, bal) ,SavingsAccount(accNum, bal,rate), CurrentAccount(accNum, bal),primaryOwner(owner1),secondaryOwner(owner2){};

    void displayOwners() const{
        cout << "Primary owner: " << primaryOwner << endl;
        cout << "Secondary owner: " << secondaryOwner << endl;
    }

    void deposit(double amount){
        Account::deposit(amount);
    }

    void withdraw(double amount){
        Account::withdraw(amount);
    }

};

int main() {
    SavingsAccount savings(1001, 5000.0, 0.05);
    savings.deposit(1000.0);
    savings.calculateInterest();

    CurrentAccount current(2001, 10000.0);
    current.withdraw(2000.0);
    current.deductServiceCharge(25.0);

    JointAccount joint(3001, 20000.0, 0.07, "Rana", "sakil");
    joint.displayOwners();
    joint.deposit(5000.0);
    joint.withdraw(10000.0);
    joint.calculateInterest();

    return 0;
}








//5. Hierarchical Inheritance Problem:


#include<bits/stdc++.h>
using namespace std;

class Animal {
protected:
    string name;
    string sound;

public:
    Animal(const string& n, const string& s) : name(n), sound(s) {}

    virtual void makeSound() const {
        cout << name << " says: " << sound <<endl;
    }
};

class Dog : public Animal {
public:
    Dog(const string& n) : Animal(n, "Woof") {}
};

class Cat : public Animal {
public:
    Cat(const string& n) : Animal(n, "Meow") {}
};

class Cow : public Animal {
public:
    Cow(const string& n) : Animal(n, "Moo") {}
};

int main() {
    Dog dog("Buddy");
    Cat cat("Whiskers");
    Cow cow("Bessie");

    dog.makeSound();
    cat.makeSound();
    cow.makeSound();

    return 0;
}

